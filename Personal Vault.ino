 byte f[100][8] = {
  {0x00, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0xff}, //0
  {0x00, 0xf2, 0x96, 0x9a, 0x92, 0x92, 0x92, 0xf7}, //1
  {0x00, 0xf7, 0x91, 0x91, 0x92, 0x94, 0x94, 0xf7}, //2
  {0x00, 0xf7, 0x91, 0x91, 0x97, 0x91, 0x91, 0xf7}, //3
  {0x00, 0xf2, 0x94, 0x9f, 0x92, 0x92, 0x92, 0xf7}, //4
  {0x00, 0xf7, 0x94, 0x94, 0x97, 0x91, 0x91, 0xf7}, //5
  {0x00, 0xf7, 0x94, 0x94, 0x97, 0x95, 0x95, 0xf7}, //6
  {0x00, 0xf7, 0x91, 0x91, 0x93, 0x94, 0x94, 0xf4}, //7
  {0x00, 0xf7, 0x95, 0x95, 0x97, 0x95, 0x95, 0xf7}, //8
  {0x00, 0xff, 0x99, 0x99, 0x9f, 0x91, 0x91, 0xff}, //9
  {0x00, 0x2f, 0x69, 0xa9, 0x29, 0x29, 0x29, 0x7f}, //10
  {0x00, 0x22, 0x66, 0xaa, 0x22, 0x22, 0x22, 0x77}, //11
  {0x00, 0x27, 0x61, 0xa1, 0x22, 0x24, 0x24, 0x77}, //12
  {0x00, 0x27, 0x61, 0xa1, 0x27, 0x21, 0x21, 0x77}, //13
  {0x00, 0x22, 0x66, 0xaf, 0x22, 0x22, 0x22, 0x77}, //14
  {0x00, 0x27, 0x64, 0xa4, 0x27, 0x21, 0x21, 0x77}, //15
  {0x00, 0x27, 0x64, 0xa4, 0x27, 0x25, 0x25, 0x77}, //16
  {0x00, 0x27, 0x61, 0xa1, 0x23, 0x24, 0x24, 0x74}, //17
  {0x00, 0x27, 0x65, 0xa5, 0x27, 0x25, 0x25, 0x77}, //18
  {0x00, 0x27, 0x65, 0xa5, 0x27, 0x21, 0x21, 0x77}, //19
  {0x00, 0x77, 0x95, 0x95, 0x25, 0x45, 0x85, 0xf7}, //20
  {0x00, 0x72, 0x96, 0x9a, 0x22, 0x42, 0x82, 0xf7}, //21
  {0x00, 0x77, 0x99, 0x99, 0x22, 0x44, 0x88, 0xff}, //22
  {0x00, 0x77, 0x91, 0x91, 0x27, 0x41, 0x81, 0xf7}, //23
  {0x00, 0x72, 0x94, 0x9f, 0x22, 0x42, 0x82, 0xf7}, //24
  {0x00, 0x77, 0x94, 0x94, 0x27, 0x41, 0x81, 0xf7}, //25
  {0x00, 0x77, 0x94, 0x94, 0x27, 0x45, 0x85, 0xf7}, //26
  {0x00, 0x77, 0x91, 0x91, 0x22, 0x44, 0x84, 0xf4}, //27
  {0x00, 0x77, 0x95, 0x95, 0x27, 0x45, 0x85, 0xf7}, //28
  {0x00, 0x77, 0x95, 0x95, 0x27, 0x41, 0x81, 0xf7}, //29
  {0x00, 0xf7, 0x15, 0x15, 0xf5, 0x15, 0x15, 0xf7}, //30
  {0x00, 0xf2, 0x16, 0x1a, 0xf2, 0x12, 0x12, 0xf7}, //31
  {0x00, 0xf7, 0x11, 0x11, 0xf2, 0x14, 0x14, 0xf7}, //32
  {0x00, 0xff, 0x11, 0x11, 0xff, 0x11, 0x11, 0xff}, //33
  {0x00, 0xf2, 0x14, 0x1f, 0xf2, 0x12, 0x12, 0xf7}, //34
  {0x00, 0xf7, 0x14, 0x14, 0xf7, 0x11, 0x11, 0xf7}, //35
  {0x00, 0xf7, 0x14, 0x14, 0xf7, 0x15, 0x15, 0xf7}, //36
  {0x00, 0xf7, 0x11, 0x11, 0xf2, 0x12, 0x12, 0xf2}, //37
  {0x00, 0xf7, 0x15, 0x15, 0xf7, 0x15, 0x15, 0xf7}, //38
  {0x00, 0xf7, 0x15, 0x15, 0xf7, 0x11, 0x11, 0xf7}, //39
  {0x00, 0x27, 0x45, 0xa5, 0xf5, 0x25, 0x25, 0x77}, //40
  {0x00, 0x22, 0x46, 0xaa, 0xf2, 0x22, 0x22, 0x77}, //41
  {0x00, 0x27, 0x41, 0xa1, 0xf2, 0x24, 0x24, 0x77}, //42
  {0x00, 0x27, 0x41, 0xa1, 0xf7, 0x21, 0x21, 0x77}, //43
  {0x00, 0x22, 0x44, 0xaa, 0xff, 0x22, 0x22, 0x77}, //44
  {0x00, 0x27, 0x44, 0xa4, 0xf7, 0x21, 0x21, 0x77}, //45
  {0x00, 0x27, 0x44, 0xa4, 0xf7, 0x25, 0x25, 0x77}, //46
  {0x00, 0x27, 0x41, 0xa1, 0xf2, 0x22, 0x22, 0x72}, //47
  {0x00, 0x27, 0x45, 0xa5, 0xf7, 0x25, 0x25, 0x77}, //48
  {0x00, 0x27, 0x45, 0xa5, 0xf7, 0x21, 0x21, 0x77}, //49
  {0x00, 0xf7, 0x85, 0x85, 0xf5, 0x15, 0x15, 0xf7}, //50
  {0x00, 0xf2, 0x86, 0x8a, 0xf2, 0x12, 0x12, 0xf7}, //51
  {0x00, 0xf7, 0x81, 0x83, 0xf2, 0x14, 0x14, 0xf7}, //52
  {0x00, 0xf7, 0x81, 0x81, 0xf7, 0x11, 0x11, 0xf7}, //53
  {0x00, 0xf2, 0x84, 0x8f, 0xf2, 0x12, 0x12, 0xf7}, //54
  {0x00, 0xff, 0x88, 0x88, 0xff, 0x11, 0x11, 0xff}, //55
  {0x00, 0xf7, 0x84, 0x84, 0xf7, 0x15, 0x15, 0xf7}, //56
  {0x00, 0xf7, 0x81, 0x81, 0xf3, 0x12, 0x12, 0xf2}, //57
  {0x00, 0xf7, 0x85, 0x85, 0xf7, 0x15, 0x15, 0xf7}, //58
  {0x00, 0xf7, 0x85, 0x85, 0xf7, 0x11, 0x11, 0xf7}, //59
  {0x00, 0xf7, 0x85, 0x85, 0xf5, 0x95, 0x95, 0xf7}, //60
  {0x00, 0xf2, 0x86, 0x8a, 0xf2, 0x92, 0x92, 0xf7}, //61
  {0x00, 0xf7, 0x81, 0x81, 0xf2, 0x94, 0x94, 0xf7}, //62
  {0x00, 0xf7, 0x81, 0x81, 0xf7, 0x91, 0x91, 0xf7}, //63
  {0x00, 0xf2, 0x84, 0x8f, 0xf2, 0x92, 0x92, 0xf7}, //64
  {0x00, 0xf7, 0x84, 0x84, 0xf7, 0x91, 0x91, 0xf7}, //65
  {0x00, 0xf7, 0x84, 0x84, 0xf7, 0x95, 0x95, 0xf7}, //66
  {0x00, 0xf7, 0x81, 0x81, 0xf3, 0x92, 0x92, 0xf2}, //67
  {0x00, 0xf7, 0x85, 0x85, 0xf7, 0x95, 0x95, 0xf7}, //68
  {0x00, 0xf7, 0x85, 0x85, 0xf7, 0x91, 0x91, 0xf7}, //69
  {0x00, 0xf7, 0x15, 0x25, 0x45, 0x45, 0x45, 0x47}, //70
  {0x00, 0xf2, 0x12, 0x26, 0x4a, 0x42, 0x42, 0x47}, //71
  {0x00, 0xf7, 0x11, 0x21, 0x42, 0x44, 0x44, 0x47}, //72
  {0x00, 0xf7, 0x11, 0x21, 0x47, 0x41, 0x41, 0x47}, //73
  {0x00, 0xf2, 0x14, 0x2f, 0x42, 0x42, 0x42, 0x47}, //74
  {0x00, 0xf7, 0x14, 0x24, 0x47, 0x41, 0x41, 0x47}, //75
  {0x00, 0xf7, 0x14, 0x24, 0x47, 0x45, 0x45, 0x47}, //76
  {0x00, 0xff, 0x11, 0x22, 0x44, 0x44, 0x44, 0x44}, //77
  {0x00, 0xf7, 0x15, 0x25, 0x47, 0x45, 0x45, 0x47}, //78
  {0x00, 0xf7, 0x15, 0x25, 0x47, 0x41, 0x41, 0x47}, //79
  {0x00, 0xf7, 0x95, 0xb5, 0xf5, 0x95, 0x95, 0xf7}, //80
  {0x00, 0xf2, 0x96, 0xba, 0xf2, 0x92, 0x92, 0xf7}, //81
  {0x00, 0xf7, 0x91, 0xb1, 0xf2, 0x94, 0x94, 0xf7}, //82
  {0x00, 0xf7, 0x91, 0xb1, 0xf7, 0x91, 0x91, 0xf7}, //83
  {0x00, 0xf2, 0x94, 0xbf, 0xf2, 0x92, 0x92, 0xf7}, //84
  {0x00, 0xf7, 0x94, 0xb4, 0xf7, 0x91, 0x91, 0xf7}, //85
  {0x00, 0xf7, 0x94, 0xb4, 0xf7, 0x95, 0x95, 0xf7}, //86
  {0x00, 0xf7, 0x91, 0xb1, 0xf2, 0x92, 0x92, 0xf2}, //87
  {0x00, 0xff, 0x99, 0xb9, 0xff, 0x99, 0x99, 0xff}, //88
  {0x00, 0xf7, 0x95, 0xb5, 0xf7, 0x91, 0x91, 0xf7}, //89
  {0x00, 0xf7, 0x95, 0xf5, 0xf5, 0x15, 0x15, 0xf7}, //90
  {0x00, 0xf2, 0x96, 0x9a, 0xf2, 0x12, 0x12, 0xf7}, //91
  {0x00, 0xf7, 0x91, 0x91, 0xf6, 0x14, 0x14, 0xf7}, //92
  {0x00, 0xf7, 0x91, 0x91, 0xf7, 0x11, 0x11, 0xf7}, //93
  {0x00, 0xf2, 0x94, 0x9f, 0xf2, 0x12, 0x12, 0xf7}, //94
  {0x00, 0xf7, 0x94, 0x94, 0xf7, 0x11, 0x11, 0xf7}, //95
  {0x00, 0xf7, 0x94, 0x94, 0xf7, 0x15, 0x15, 0xf7}, //96
  {0x00, 0xf7, 0x91, 0x91, 0xf2, 0x12, 0x12, 0xf2}, //97
  {0x00, 0xf7, 0x95, 0x95, 0xf7, 0x15, 0x15, 0xf7}, //98
  {0x00, 0xff, 0x99, 0x99, 0xff, 0x11, 0x11, 0xff}, //99
};


byte error[8] = {0x00, 0x66, 0x99, 0x11, 0x22, 0x44, 0x00, 0x44};

#include <LedControl.h>
#include <Servo.h>

#define encoder0CLK 2
#define encoder0DT 3
#define encoder0SW A2

#define lcdDIN 13
#define lcdCS 11
#define lcdCLK 10

#define buttonPin 4
#define redLED 7
#define yellowLED 6
#define greenLED 5

#define servoPin 9

static int pinA = 2; // Our first hardware interrupt pin is digital pin 2
static int pinB = 3; // Our second hardware interrupt pin is digital pin 3
volatile byte aFlag = 0; // let's us know when we're expecting a rising edge on pinA to signal that the encoder has arrived at a detent
volatile byte bFlag = 0; // let's us know when we're expecting a rising edge on pinB to signal that the encoder has arrived at a detent (opposite direction to when aFlag is set)
volatile byte encoderPos = 0; //this variable stores our current value of encoder position. Change to int or uin16_t instead of byte if you want to record a larger range than 0-255
volatile byte oldEncPos = 0; //stores the last encoder position value so we can compare to the current reading and see if it has changed (so we know when to print to the serial monitor)
volatile byte reading = 0; //somewhere to store the direct values we read from our interrupt pins before checking to see if we have moved a whole detent

bool pressed = false;
LedControl lc = LedControl(lcdDIN, lcdCLK, lcdCS, 0);

int pos;
Servo Servo1;

int password;

bool lock = false;
void setup() {

  lc.shutdown(0, false);      //The MAX72XX is in power-saving mode on startup
  lc.setIntensity(0, 5);     // Set the brightness to maximum value
  lc.clearDisplay(0);         // and clear the display

  // initialize the pushbutton pin as an input:
  pinMode(buttonPin, INPUT);
  pinMode(redLED, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(greenLED, OUTPUT);

  digitalWrite(greenLED, HIGH);

  pinMode(pinA, INPUT_PULLUP); // set pinA as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  pinMode(pinB, INPUT_PULLUP); // set pinB as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  attachInterrupt(0, PinA, RISING); // set an interrupt on PinA, looking for a rising edge signal and executing the "PinA" Interrupt Service Routine (below)
  attachInterrupt(1, PinB, RISING); // set an interrupt on PinB, looking for a rising edge signal and executing the "PinB" Interrupt Service Routine (below)
  Serial.begin(115200); // start the serial monitor link

  Servo1.attach(servoPin);
  Servo1.write(0);
}

void PinA() {
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; // read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && aFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos --; //decrement the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00000100) bFlag = 1; //signal that we're expecting pinB to signal the transition to detent from free rotation
  sei(); //restart interrupts
}

void PinB() {
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; //read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && bFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos ++; //increment the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00001000) aFlag = 1; //signal that we're expecting pinA to signal the transition to detent from free rotation
  sei(); //restart interrupts
}
void(* resetFunc) (void) = 0; //declare reset function @ address 0

void loop() {
  Serial.println(encoderPos);
  if (checkButtonPressed(oldEncPos) == true) {
    reset();

    printToLcd(oldEncPos);

    digitalWrite(greenLED, LOW);
    digitalWrite(yellowLED, HIGH);

    lock = true;
    close_servo();
  }

  while ( lock == true) {

    if (checkInput(oldEncPos) == false) {
      
      readRotaryEncoder();

    } else {
      digitalWrite(yellowLED, LOW);
      Serial.println("Correct. Open the vault ....");
      resetFunc();
    }
  }

  readRotaryEncoder();
}

void readRotaryEncoder() {
  if (oldEncPos != encoderPos) {
    Serial.println(encoderPos);
    oldEncPos = encoderPos;
    printToLcd(oldEncPos);
  }

}


void reset() {
  encoderPos = 0;
  oldEncPos = encoderPos;
}


void printByte(byte character [])
{

  int i = 0;
  for (i = 0; i < 8; i++)
  {
    lc.setRow(0, i, character[i]);
  }
}
void printToLcd(int index) {

  if ( index < 0 || index > 100 ) {
    printByte(error);
  } else {
    printByte(f[index]);
  }
}


bool checkButtonPressed(int number) {
  if ( digitalRead(buttonPin) == HIGH && checkPassword(number) == true) {
    password = number;
    Serial.println("Password Save Sucessfully");
    return true;
  } else {
    return 0;
  }
}

bool checkInput(int num) {
  if (digitalRead(buttonPin) == HIGH && num == password) {

    return true;

  } else if (digitalRead(buttonPin) == HIGH && num != password) {
    Serial.println("Incorrect. Give it another try ....");
    digitalWrite(redLED, HIGH);
    delay(1);
    digitalWrite(redLED, LOW);
    return false;
  }

}

bool checkPassword(int num) {
  if ( num >= 0 && num < 100) {
    return true;
  } else {
    return false;
  }
}


void close_servo() {
  Servo1.attach(9); // attaches the servo on pin 9 to the servo object

  for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    Servo1.write(pos); // tell servo to go to position in variable 'pos'
    delay(15); // waits 15ms for the servo to reach the position
  }
  Servo1.detach();// detach the servo from arduino
  delay(1000);
}
